// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BurnCATokens extends ethereum.Event {
  get params(): BurnCATokens__Params {
    return new BurnCATokens__Params(this);
  }
}

export class BurnCATokens__Params {
  _event: BurnCATokens;

  constructor(event: BurnCATokens) {
    this._event = event;
  }

  get claimId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getLockedCNAgainstCover(_coverId: BigInt): BigInt {
    let result = super.call(
      "getLockedCNAgainstCover",
      "getLockedCNAgainstCover(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_coverId)]
    );

    return result[0].toBigInt();
  }

  try_getLockedCNAgainstCover(_coverId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLockedCNAgainstCover",
      "getLockedCNAgainstCover(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_coverId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tk(): Address {
    let result = super.call("tk", "tk():(address)", []);

    return result[0].toAddress();
  }

  try_tk(): ethereum.CallResult<Address> {
    let result = super.tryCall("tk", "tk():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStakerUnlockableTokensOnSmartContract(
    stakerAddress: Address,
    stakedContractAddress: Address,
    stakerIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerUnlockableTokensOnSmartContract",
      "getStakerUnlockableTokensOnSmartContract(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(stakerAddress),
        ethereum.Value.fromAddress(stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(stakerIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerUnlockableTokensOnSmartContract(
    stakerAddress: Address,
    stakedContractAddress: Address,
    stakerIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerUnlockableTokensOnSmartContract",
      "getStakerUnlockableTokensOnSmartContract(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(stakerAddress),
        ethereum.Value.fromAddress(stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalStakedTokensOnSmartContract(_stakedContractAddress: Address): BigInt {
    let result = super.call(
      "getTotalStakedTokensOnSmartContract",
      "getTotalStakedTokensOnSmartContract(address):(uint256)",
      [ethereum.Value.fromAddress(_stakedContractAddress)]
    );

    return result[0].toBigInt();
  }

  try_getTotalStakedTokensOnSmartContract(
    _stakedContractAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStakedTokensOnSmartContract",
      "getTotalStakedTokensOnSmartContract(address):(uint256)",
      [ethereum.Value.fromAddress(_stakedContractAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenPrice(curr: Bytes): BigInt {
    let result = super.call(
      "getTokenPrice",
      "getTokenPrice(bytes4):(uint256)",
      [ethereum.Value.fromFixedBytes(curr)]
    );

    return result[0].toBigInt();
  }

  try_getTokenPrice(curr: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenPrice",
      "getTokenPrice(bytes4):(uint256)",
      [ethereum.Value.fromFixedBytes(curr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositCN(coverId: BigInt): boolean {
    let result = super.call("depositCN", "depositCN(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(coverId)
    ]);

    return result[0].toBoolean();
  }

  try_depositCN(coverId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("depositCN", "depositCN(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(coverId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getUserAllLockedCNTokens(_of: Address): BigInt {
    let result = super.call(
      "getUserAllLockedCNTokens",
      "getUserAllLockedCNTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_of)]
    );

    return result[0].toBigInt();
  }

  try_getUserAllLockedCNTokens(_of: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserAllLockedCNTokens",
      "getUserAllLockedCNTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_of)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerAllLockedTokens(_stakerAddress: Address): BigInt {
    let result = super.call(
      "getStakerAllLockedTokens",
      "getStakerAllLockedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getStakerAllLockedTokens(
    _stakerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerAllLockedTokens",
      "getStakerAllLockedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnDepositCN(coverId: BigInt): boolean {
    let result = super.call("burnDepositCN", "burnDepositCN(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(coverId)
    ]);

    return result[0].toBoolean();
  }

  try_burnDepositCN(coverId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "burnDepositCN",
      "burnDepositCN(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(coverId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ms(): Address {
    let result = super.call("ms", "ms():(address)", []);

    return result[0].toAddress();
  }

  try_ms(): ethereum.CallResult<Address> {
    let result = super.tryCall("ms", "ms():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isLockedForMemberVote(_of: Address): boolean {
    let result = super.call(
      "isLockedForMemberVote",
      "isLockedForMemberVote(address):(bool)",
      [ethereum.Value.fromAddress(_of)]
    );

    return result[0].toBoolean();
  }

  try_isLockedForMemberVote(_of: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLockedForMemberVote",
      "isLockedForMemberVote(address):(bool)",
      [ethereum.Value.fromAddress(_of)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getUserLockedCNTokens(_of: Address, _coverId: BigInt): BigInt {
    let result = super.call(
      "getUserLockedCNTokens",
      "getUserLockedCNTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_of),
        ethereum.Value.fromUnsignedBigInt(_coverId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserLockedCNTokens(
    _of: Address,
    _coverId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserLockedCNTokens",
      "getUserLockedCNTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_of),
        ethereum.Value.fromUnsignedBigInt(_coverId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerLockedTokensOnSmartContract(
    _stakerAddress: Address,
    _stakedContractAddress: Address,
    _stakedContractIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerLockedTokensOnSmartContract",
      "getStakerLockedTokensOnSmartContract(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromAddress(_stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(_stakedContractIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerLockedTokensOnSmartContract(
    _stakerAddress: Address,
    _stakedContractAddress: Address,
    _stakedContractIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerLockedTokensOnSmartContract",
      "getStakerLockedTokensOnSmartContract(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromAddress(_stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(_stakedContractIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nxMasterAddress(): Address {
    let result = super.call(
      "nxMasterAddress",
      "nxMasterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nxMasterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nxMasterAddress",
      "nxMasterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStakerAllUnlockableStakedTokens(_stakerAddress: Address): BigInt {
    let result = super.call(
      "getStakerAllUnlockableStakedTokens",
      "getStakerAllUnlockableStakedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getStakerAllUnlockableStakedTokens(
    _stakerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerAllUnlockableStakedTokens",
      "getStakerAllUnlockableStakedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class UpdateStakerCommissionsCall extends ethereum.Call {
  get inputs(): UpdateStakerCommissionsCall__Inputs {
    return new UpdateStakerCommissionsCall__Inputs(this);
  }

  get outputs(): UpdateStakerCommissionsCall__Outputs {
    return new UpdateStakerCommissionsCall__Outputs(this);
  }
}

export class UpdateStakerCommissionsCall__Inputs {
  _call: UpdateStakerCommissionsCall;

  constructor(call: UpdateStakerCommissionsCall) {
    this._call = call;
  }

  get _scAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _premiumNXM(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStakerCommissionsCall__Outputs {
  _call: UpdateStakerCommissionsCall;

  constructor(call: UpdateStakerCommissionsCall) {
    this._call = call;
  }
}

export class ChangeDependentContractAddressCall extends ethereum.Call {
  get inputs(): ChangeDependentContractAddressCall__Inputs {
    return new ChangeDependentContractAddressCall__Inputs(this);
  }

  get outputs(): ChangeDependentContractAddressCall__Outputs {
    return new ChangeDependentContractAddressCall__Outputs(this);
  }
}

export class ChangeDependentContractAddressCall__Inputs {
  _call: ChangeDependentContractAddressCall;

  constructor(call: ChangeDependentContractAddressCall) {
    this._call = call;
  }
}

export class ChangeDependentContractAddressCall__Outputs {
  _call: ChangeDependentContractAddressCall;

  constructor(call: ChangeDependentContractAddressCall) {
    this._call = call;
  }
}

export class FixUnlockRecordCall extends ethereum.Call {
  get inputs(): FixUnlockRecordCall__Inputs {
    return new FixUnlockRecordCall__Inputs(this);
  }

  get outputs(): FixUnlockRecordCall__Outputs {
    return new FixUnlockRecordCall__Outputs(this);
  }
}

export class FixUnlockRecordCall__Inputs {
  _call: FixUnlockRecordCall;

  constructor(call: FixUnlockRecordCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FixUnlockRecordCall__Outputs {
  _call: FixUnlockRecordCall;

  constructor(call: FixUnlockRecordCall) {
    this._call = call;
  }
}

export class DepositCNCall extends ethereum.Call {
  get inputs(): DepositCNCall__Inputs {
    return new DepositCNCall__Inputs(this);
  }

  get outputs(): DepositCNCall__Outputs {
    return new DepositCNCall__Outputs(this);
  }
}

export class DepositCNCall__Inputs {
  _call: DepositCNCall;

  constructor(call: DepositCNCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCNCall__Outputs {
  _call: DepositCNCall;

  constructor(call: DepositCNCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddStakeCall extends ethereum.Call {
  get inputs(): AddStakeCall__Inputs {
    return new AddStakeCall__Inputs(this);
  }

  get outputs(): AddStakeCall__Outputs {
    return new AddStakeCall__Outputs(this);
  }
}

export class AddStakeCall__Inputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }

  get _scAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddStakeCall__Outputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }
}

export class BurnDepositCNCall extends ethereum.Call {
  get inputs(): BurnDepositCNCall__Inputs {
    return new BurnDepositCNCall__Inputs(this);
  }

  get outputs(): BurnDepositCNCall__Outputs {
    return new BurnDepositCNCall__Outputs(this);
  }
}

export class BurnDepositCNCall__Inputs {
  _call: BurnDepositCNCall;

  constructor(call: BurnDepositCNCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnDepositCNCall__Outputs {
  _call: BurnDepositCNCall;

  constructor(call: BurnDepositCNCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnlockCNCall extends ethereum.Call {
  get inputs(): UnlockCNCall__Inputs {
    return new UnlockCNCall__Inputs(this);
  }

  get outputs(): UnlockCNCall__Outputs {
    return new UnlockCNCall__Outputs(this);
  }
}

export class UnlockCNCall__Inputs {
  _call: UnlockCNCall;

  constructor(call: UnlockCNCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockCNCall__Outputs {
  _call: UnlockCNCall;

  constructor(call: UnlockCNCall) {
    this._call = call;
  }
}

export class BurnCATokenCall extends ethereum.Call {
  get inputs(): BurnCATokenCall__Inputs {
    return new BurnCATokenCall__Inputs(this);
  }

  get outputs(): BurnCATokenCall__Outputs {
    return new BurnCATokenCall__Outputs(this);
  }
}

export class BurnCATokenCall__Inputs {
  _call: BurnCATokenCall;

  constructor(call: BurnCATokenCall) {
    this._call = call;
  }

  get claimid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _of(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BurnCATokenCall__Outputs {
  _call: BurnCATokenCall;

  constructor(call: BurnCATokenCall) {
    this._call = call;
  }
}

export class ChangeMasterAddressCall extends ethereum.Call {
  get inputs(): ChangeMasterAddressCall__Inputs {
    return new ChangeMasterAddressCall__Inputs(this);
  }

  get outputs(): ChangeMasterAddressCall__Outputs {
    return new ChangeMasterAddressCall__Outputs(this);
  }
}

export class ChangeMasterAddressCall__Inputs {
  _call: ChangeMasterAddressCall;

  constructor(call: ChangeMasterAddressCall) {
    this._call = call;
  }

  get _masterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeMasterAddressCall__Outputs {
  _call: ChangeMasterAddressCall;

  constructor(call: ChangeMasterAddressCall) {
    this._call = call;
  }
}

export class ExtendCNEPOffCall extends ethereum.Call {
  get inputs(): ExtendCNEPOffCall__Inputs {
    return new ExtendCNEPOffCall__Inputs(this);
  }

  get outputs(): ExtendCNEPOffCall__Outputs {
    return new ExtendCNEPOffCall__Outputs(this);
  }
}

export class ExtendCNEPOffCall__Inputs {
  _call: ExtendCNEPOffCall;

  constructor(call: ExtendCNEPOffCall) {
    this._call = call;
  }

  get _of(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _coverId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExtendCNEPOffCall__Outputs {
  _call: ExtendCNEPOffCall;

  constructor(call: ExtendCNEPOffCall) {
    this._call = call;
  }
}

export class LockCNCall extends ethereum.Call {
  get inputs(): LockCNCall__Inputs {
    return new LockCNCall__Inputs(this);
  }

  get outputs(): LockCNCall__Outputs {
    return new LockCNCall__Outputs(this);
  }
}

export class LockCNCall__Inputs {
  _call: LockCNCall;

  constructor(call: LockCNCall) {
    this._call = call;
  }

  get coverNoteAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get coverPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get coverId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _of(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class LockCNCall__Outputs {
  _call: LockCNCall;

  constructor(call: LockCNCall) {
    this._call = call;
  }
}

export class BurnStakerLockedTokenCall extends ethereum.Call {
  get inputs(): BurnStakerLockedTokenCall__Inputs {
    return new BurnStakerLockedTokenCall__Inputs(this);
  }

  get outputs(): BurnStakerLockedTokenCall__Outputs {
    return new BurnStakerLockedTokenCall__Outputs(this);
  }
}

export class BurnStakerLockedTokenCall__Inputs {
  _call: BurnStakerLockedTokenCall;

  constructor(call: BurnStakerLockedTokenCall) {
    this._call = call;
  }

  get coverid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get curr(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sumAssured(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnStakerLockedTokenCall__Outputs {
  _call: BurnStakerLockedTokenCall;

  constructor(call: BurnStakerLockedTokenCall) {
    this._call = call;
  }
}

export class UnlockStakerUnlockableTokensCall extends ethereum.Call {
  get inputs(): UnlockStakerUnlockableTokensCall__Inputs {
    return new UnlockStakerUnlockableTokensCall__Inputs(this);
  }

  get outputs(): UnlockStakerUnlockableTokensCall__Outputs {
    return new UnlockStakerUnlockableTokensCall__Outputs(this);
  }
}

export class UnlockStakerUnlockableTokensCall__Inputs {
  _call: UnlockStakerUnlockableTokensCall;

  constructor(call: UnlockStakerUnlockableTokensCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnlockStakerUnlockableTokensCall__Outputs {
  _call: UnlockStakerUnlockableTokensCall;

  constructor(call: UnlockStakerUnlockableTokensCall) {
    this._call = call;
  }
}
