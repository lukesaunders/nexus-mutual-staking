// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Commission extends ethereum.Event {
  get params(): Commission__Params {
    return new Commission__Params(this);
  }
}

export class Commission__Params {
  _event: Commission;

  constructor(event: Commission) {
    this._event = event;
  }

  get stakedContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get scIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get commissionAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Contract__depositedCNResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Contract__getUintParametersResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__stakedContractStakeCommissionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__stakedContractStakersResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__stakerStakedContractsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  lockCADays(): BigInt {
    let result = super.call("lockCADays", "lockCADays():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockCADays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockCADays", "lockCADays():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositedCN(param0: BigInt): Contract__depositedCNResult {
    let result = super.call(
      "depositedCN",
      "depositedCN(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__depositedCNResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_depositedCN(
    param0: BigInt
  ): ethereum.CallResult<Contract__depositedCNResult> {
    let result = super.tryCall(
      "depositedCN",
      "depositedCN(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__depositedCNResult(value[0].toBigInt(), value[1].toBoolean())
    );
  }

  lockMVDays(): BigInt {
    let result = super.call("lockMVDays", "lockMVDays():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockMVDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockMVDays", "lockMVDays():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakedContractStakerIndex(
    _stakedContractAddress: Address,
    _stakedContractIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakedContractStakerIndex",
      "getStakedContractStakerIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(_stakedContractIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakedContractStakerIndex(
    _stakedContractAddress: Address,
    _stakedContractIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakedContractStakerIndex",
      "getStakedContractStakerIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(_stakedContractIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerEarnedStakeCommission(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerEarnedStakeCommission",
      "getStakerEarnedStakeCommission(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerEarnedStakeCommission(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerEarnedStakeCommission",
      "getStakerEarnedStakeCommission(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerStakedBurnedByIndex(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerStakedBurnedByIndex",
      "getStakerStakedBurnedByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerStakedBurnedByIndex(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerStakedBurnedByIndex",
      "getStakerStakedBurnedByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerTotalReedmedStakeCommission(_stakerAddress: Address): BigInt {
    let result = super.call(
      "getStakerTotalReedmedStakeCommission",
      "getStakerTotalReedmedStakeCommission(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getStakerTotalReedmedStakeCommission(
    _stakerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerTotalReedmedStakeCommission",
      "getStakerTotalReedmedStakeCommission(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerInitialStakedAmountOnContract(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerInitialStakedAmountOnContract",
      "getStakerInitialStakedAmountOnContract(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerInitialStakedAmountOnContract(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerInitialStakedAmountOnContract",
      "getStakerInitialStakedAmountOnContract(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerTotalEarnedStakeCommission(_stakerAddress: Address): BigInt {
    let result = super.call(
      "getStakerTotalEarnedStakeCommission",
      "getStakerTotalEarnedStakeCommission(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getStakerTotalEarnedStakeCommission(
    _stakerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerTotalEarnedStakeCommission",
      "getStakerTotalEarnedStakeCommission(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUintParameters(code: Bytes): Contract__getUintParametersResult {
    let result = super.call(
      "getUintParameters",
      "getUintParameters(bytes8):(bytes8,uint256)",
      [ethereum.Value.fromFixedBytes(code)]
    );

    return new Contract__getUintParametersResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_getUintParameters(
    code: Bytes
  ): ethereum.CallResult<Contract__getUintParametersResult> {
    let result = super.tryCall(
      "getUintParameters",
      "getUintParameters(bytes8):(bytes8,uint256)",
      [ethereum.Value.fromFixedBytes(code)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getUintParametersResult(
        value[0].toBytes(),
        value[1].toBigInt()
      )
    );
  }

  stakerMaxCommissionPer(): BigInt {
    let result = super.call(
      "stakerMaxCommissionPer",
      "stakerMaxCommissionPer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakerMaxCommissionPer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerMaxCommissionPer",
      "stakerMaxCommissionPer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  walletAddress(): Address {
    let result = super.call("walletAddress", "walletAddress():(address)", []);

    return result[0].toAddress();
  }

  try_walletAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "walletAddress",
      "walletAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  joiningFee(): BigInt {
    let result = super.call("joiningFee", "joiningFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_joiningFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("joiningFee", "joiningFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerStakedContractIndex(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerStakedContractIndex",
      "getStakerStakedContractIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerStakedContractIndex(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerStakedContractIndex",
      "getStakerStakedContractIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedContractCurrentCommissionIndex(param0: Address): BigInt {
    let result = super.call(
      "stakedContractCurrentCommissionIndex",
      "stakedContractCurrentCommissionIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakedContractCurrentCommissionIndex(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedContractCurrentCommissionIndex",
      "stakedContractCurrentCommissionIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceStep(): BigInt {
    let result = super.call("priceStep", "priceStep():(uint256)", []);

    return result[0].toBigInt();
  }

  try_priceStep(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("priceStep", "priceStep():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bookTime(): BigInt {
    let result = super.call("bookTime", "bookTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bookTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bookTime", "bookTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerStakedContractByIndex(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): Address {
    let result = super.call(
      "getStakerStakedContractByIndex",
      "getStakerStakedContractByIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );

    return result[0].toAddress();
  }

  try_getStakerStakedContractByIndex(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getStakerStakedContractByIndex",
      "getStakerStakedContractByIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ms(): Address {
    let result = super.call("ms", "ms():(address)", []);

    return result[0].toAddress();
  }

  try_ms(): ethereum.CallResult<Address> {
    let result = super.tryCall("ms", "ms():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedContractStakeCommission(
    param0: Address,
    param1: BigInt
  ): Contract__stakedContractStakeCommissionResult {
    let result = super.call(
      "stakedContractStakeCommission",
      "stakedContractStakeCommission(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__stakedContractStakeCommissionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_stakedContractStakeCommission(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Contract__stakedContractStakeCommissionResult> {
    let result = super.tryCall(
      "stakedContractStakeCommission",
      "stakedContractStakeCommission(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__stakedContractStakeCommissionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getStakerStakedUnlockableBeforeLastBurnByIndex(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerStakedUnlockableBeforeLastBurnByIndex",
      "getStakerStakedUnlockableBeforeLastBurnByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerStakedUnlockableBeforeLastBurnByIndex(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerStakedUnlockableBeforeLastBurnByIndex",
      "getStakerStakedUnlockableBeforeLastBurnByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakedContractStakerByIndex(
    _stakedContractAddress: Address,
    _stakedContractIndex: BigInt
  ): Address {
    let result = super.call(
      "getStakedContractStakerByIndex",
      "getStakedContractStakerByIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(_stakedContractIndex)
      ]
    );

    return result[0].toAddress();
  }

  try_getStakedContractStakerByIndex(
    _stakedContractAddress: Address,
    _stakedContractIndex: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getStakedContractStakerByIndex",
      "getStakedContractStakerByIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(_stakedContractIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedContractStakers(
    param0: Address,
    param1: BigInt
  ): Contract__stakedContractStakersResult {
    let result = super.call(
      "stakedContractStakers",
      "stakedContractStakers(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__stakedContractStakersResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_stakedContractStakers(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Contract__stakedContractStakersResult> {
    let result = super.tryCall(
      "stakedContractStakers",
      "stakedContractStakers(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__stakedContractStakersResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  stakerStakedContracts(
    param0: Address,
    param1: BigInt
  ): Contract__stakerStakedContractsResult {
    let result = super.call(
      "stakerStakedContracts",
      "stakerStakedContracts(address,uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__stakerStakedContractsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_stakerStakedContracts(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Contract__stakerStakedContractsResult> {
    let result = super.tryCall(
      "stakerStakedContracts",
      "stakerStakedContracts(address,uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__stakerStakedContractsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  scValidDays(): BigInt {
    let result = super.call("scValidDays", "scValidDays():(uint256)", []);

    return result[0].toBigInt();
  }

  try_scValidDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("scValidDays", "scValidDays():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockTokenTimeAfterCoverExp(): BigInt {
    let result = super.call(
      "lockTokenTimeAfterCoverExp",
      "lockTokenTimeAfterCoverExp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lockTokenTimeAfterCoverExp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockTokenTimeAfterCoverExp",
      "lockTokenTimeAfterCoverExp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCompletedStakeCommission(param0: Address): BigInt {
    let result = super.call(
      "lastCompletedStakeCommission",
      "lastCompletedStakeCommission(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastCompletedStakeCommission(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCompletedStakeCommission",
      "lastCompletedStakeCommission(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addStake(
    _stakerAddress: Address,
    _stakedContractAddress: Address,
    _amount: BigInt
  ): BigInt {
    let result = super.call(
      "addStake",
      "addStake(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromAddress(_stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_addStake(
    _stakerAddress: Address,
    _stakedContractAddress: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addStake",
      "addStake(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromAddress(_stakedContractAddress),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakerCommissionPer(): BigInt {
    let result = super.call(
      "stakerCommissionPer",
      "stakerCommissionPer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakerCommissionPer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerCommissionPer",
      "stakerCommissionPer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isCATokensBooked(_of: Address): boolean {
    let result = super.call(
      "isCATokensBooked",
      "isCATokensBooked(address):(bool)",
      [ethereum.Value.fromAddress(_of)]
    );

    return result[0].toBoolean();
  }

  try_isCATokensBooked(_of: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCATokensBooked",
      "isCATokensBooked(address):(bool)",
      [ethereum.Value.fromAddress(_of)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getStakerStakedContractLength(_stakerAddress: Address): BigInt {
    let result = super.call(
      "getStakerStakedContractLength",
      "getStakerStakedContractLength(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getStakerStakedContractLength(
    _stakerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerStakedContractLength",
      "getStakerStakedContractLength(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenExponent(): BigInt {
    let result = super.call("tokenExponent", "tokenExponent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenExponent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenExponent",
      "tokenExponent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nxMasterAddress(): Address {
    let result = super.call(
      "nxMasterAddress",
      "nxMasterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nxMasterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nxMasterAddress",
      "nxMasterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStakedContractStakersLength(_stakedContractAddress: Address): BigInt {
    let result = super.call(
      "getStakedContractStakersLength",
      "getStakedContractStakersLength(address):(uint256)",
      [ethereum.Value.fromAddress(_stakedContractAddress)]
    );

    return result[0].toBigInt();
  }

  try_getStakedContractStakersLength(
    _stakedContractAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakedContractStakersLength",
      "getStakedContractStakersLength(address):(uint256)",
      [ethereum.Value.fromAddress(_stakedContractAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerRedeemedStakeCommission(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerRedeemedStakeCommission",
      "getStakerRedeemedStakeCommission(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerRedeemedStakeCommission(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerRedeemedStakeCommission",
      "getStakerRedeemedStakeCommission(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedContractCurrentBurnIndex(param0: Address): BigInt {
    let result = super.call(
      "stakedContractCurrentBurnIndex",
      "stakedContractCurrentBurnIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakedContractCurrentBurnIndex(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedContractCurrentBurnIndex",
      "stakedContractCurrentBurnIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerUnlockedStakedTokens(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): BigInt {
    let result = super.call(
      "getStakerUnlockedStakedTokens",
      "getStakerUnlockedStakedTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStakerUnlockedStakedTokens(
    _stakerAddress: Address,
    _stakerIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerUnlockedStakedTokens",
      "getStakerUnlockedStakedTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_stakerAddress),
        ethereum.Value.fromUnsignedBigInt(_stakerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class PushBurnedTokensCall extends ethereum.Call {
  get inputs(): PushBurnedTokensCall__Inputs {
    return new PushBurnedTokensCall__Inputs(this);
  }

  get outputs(): PushBurnedTokensCall__Outputs {
    return new PushBurnedTokensCall__Outputs(this);
  }
}

export class PushBurnedTokensCall__Inputs {
  _call: PushBurnedTokensCall;

  constructor(call: PushBurnedTokensCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakerIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PushBurnedTokensCall__Outputs {
  _call: PushBurnedTokensCall;

  constructor(call: PushBurnedTokensCall) {
    this._call = call;
  }
}

export class ChangeDependentContractAddressCall extends ethereum.Call {
  get inputs(): ChangeDependentContractAddressCall__Inputs {
    return new ChangeDependentContractAddressCall__Inputs(this);
  }

  get outputs(): ChangeDependentContractAddressCall__Outputs {
    return new ChangeDependentContractAddressCall__Outputs(this);
  }
}

export class ChangeDependentContractAddressCall__Inputs {
  _call: ChangeDependentContractAddressCall;

  constructor(call: ChangeDependentContractAddressCall) {
    this._call = call;
  }
}

export class ChangeDependentContractAddressCall__Outputs {
  _call: ChangeDependentContractAddressCall;

  constructor(call: ChangeDependentContractAddressCall) {
    this._call = call;
  }
}

export class PushUnlockableBeforeLastBurnTokensCall extends ethereum.Call {
  get inputs(): PushUnlockableBeforeLastBurnTokensCall__Inputs {
    return new PushUnlockableBeforeLastBurnTokensCall__Inputs(this);
  }

  get outputs(): PushUnlockableBeforeLastBurnTokensCall__Outputs {
    return new PushUnlockableBeforeLastBurnTokensCall__Outputs(this);
  }
}

export class PushUnlockableBeforeLastBurnTokensCall__Inputs {
  _call: PushUnlockableBeforeLastBurnTokensCall;

  constructor(call: PushUnlockableBeforeLastBurnTokensCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakerIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PushUnlockableBeforeLastBurnTokensCall__Outputs {
  _call: PushUnlockableBeforeLastBurnTokensCall;

  constructor(call: PushUnlockableBeforeLastBurnTokensCall) {
    this._call = call;
  }
}

export class SetLastCompletedStakeCommissionIndexCall extends ethereum.Call {
  get inputs(): SetLastCompletedStakeCommissionIndexCall__Inputs {
    return new SetLastCompletedStakeCommissionIndexCall__Inputs(this);
  }

  get outputs(): SetLastCompletedStakeCommissionIndexCall__Outputs {
    return new SetLastCompletedStakeCommissionIndexCall__Outputs(this);
  }
}

export class SetLastCompletedStakeCommissionIndexCall__Inputs {
  _call: SetLastCompletedStakeCommissionIndexCall;

  constructor(call: SetLastCompletedStakeCommissionIndexCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLastCompletedStakeCommissionIndexCall__Outputs {
  _call: SetLastCompletedStakeCommissionIndexCall;

  constructor(call: SetLastCompletedStakeCommissionIndexCall) {
    this._call = call;
  }
}

export class PushEarnedStakeCommissionsCall extends ethereum.Call {
  get inputs(): PushEarnedStakeCommissionsCall__Inputs {
    return new PushEarnedStakeCommissionsCall__Inputs(this);
  }

  get outputs(): PushEarnedStakeCommissionsCall__Outputs {
    return new PushEarnedStakeCommissionsCall__Outputs(this);
  }
}

export class PushEarnedStakeCommissionsCall__Inputs {
  _call: PushEarnedStakeCommissionsCall;

  constructor(call: PushEarnedStakeCommissionsCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakedContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakedContractIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _commissionAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class PushEarnedStakeCommissionsCall__Outputs {
  _call: PushEarnedStakeCommissionsCall;

  constructor(call: PushEarnedStakeCommissionsCall) {
    this._call = call;
  }
}

export class BookCATokensCall extends ethereum.Call {
  get inputs(): BookCATokensCall__Inputs {
    return new BookCATokensCall__Inputs(this);
  }

  get outputs(): BookCATokensCall__Outputs {
    return new BookCATokensCall__Outputs(this);
  }
}

export class BookCATokensCall__Inputs {
  _call: BookCATokensCall;

  constructor(call: BookCATokensCall) {
    this._call = call;
  }

  get _of(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BookCATokensCall__Outputs {
  _call: BookCATokensCall;

  constructor(call: BookCATokensCall) {
    this._call = call;
  }
}

export class SetDepositCNAmountCall extends ethereum.Call {
  get inputs(): SetDepositCNAmountCall__Inputs {
    return new SetDepositCNAmountCall__Inputs(this);
  }

  get outputs(): SetDepositCNAmountCall__Outputs {
    return new SetDepositCNAmountCall__Outputs(this);
  }
}

export class SetDepositCNAmountCall__Inputs {
  _call: SetDepositCNAmountCall;

  constructor(call: SetDepositCNAmountCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDepositCNAmountCall__Outputs {
  _call: SetDepositCNAmountCall;

  constructor(call: SetDepositCNAmountCall) {
    this._call = call;
  }
}

export class SetDepositCNCall extends ethereum.Call {
  get inputs(): SetDepositCNCall__Inputs {
    return new SetDepositCNCall__Inputs(this);
  }

  get outputs(): SetDepositCNCall__Outputs {
    return new SetDepositCNCall__Outputs(this);
  }
}

export class SetDepositCNCall__Inputs {
  _call: SetDepositCNCall;

  constructor(call: SetDepositCNCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get flag(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetDepositCNCall__Outputs {
  _call: SetDepositCNCall;

  constructor(call: SetDepositCNCall) {
    this._call = call;
  }
}

export class PushUnlockedStakedTokensCall extends ethereum.Call {
  get inputs(): PushUnlockedStakedTokensCall__Inputs {
    return new PushUnlockedStakedTokensCall__Inputs(this);
  }

  get outputs(): PushUnlockedStakedTokensCall__Outputs {
    return new PushUnlockedStakedTokensCall__Outputs(this);
  }
}

export class PushUnlockedStakedTokensCall__Inputs {
  _call: PushUnlockedStakedTokensCall;

  constructor(call: PushUnlockedStakedTokensCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakerIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PushUnlockedStakedTokensCall__Outputs {
  _call: PushUnlockedStakedTokensCall;

  constructor(call: PushUnlockedStakedTokensCall) {
    this._call = call;
  }
}

export class UpdateUintParametersCall extends ethereum.Call {
  get inputs(): UpdateUintParametersCall__Inputs {
    return new UpdateUintParametersCall__Inputs(this);
  }

  get outputs(): UpdateUintParametersCall__Outputs {
    return new UpdateUintParametersCall__Outputs(this);
  }
}

export class UpdateUintParametersCall__Inputs {
  _call: UpdateUintParametersCall;

  constructor(call: UpdateUintParametersCall) {
    this._call = call;
  }

  get code(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get val(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateUintParametersCall__Outputs {
  _call: UpdateUintParametersCall;

  constructor(call: UpdateUintParametersCall) {
    this._call = call;
  }
}

export class SetStakedContractCurrentCommissionIndexCall extends ethereum.Call {
  get inputs(): SetStakedContractCurrentCommissionIndexCall__Inputs {
    return new SetStakedContractCurrentCommissionIndexCall__Inputs(this);
  }

  get outputs(): SetStakedContractCurrentCommissionIndexCall__Outputs {
    return new SetStakedContractCurrentCommissionIndexCall__Outputs(this);
  }
}

export class SetStakedContractCurrentCommissionIndexCall__Inputs {
  _call: SetStakedContractCurrentCommissionIndexCall;

  constructor(call: SetStakedContractCurrentCommissionIndexCall) {
    this._call = call;
  }

  get _stakedContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStakedContractCurrentCommissionIndexCall__Outputs {
  _call: SetStakedContractCurrentCommissionIndexCall;

  constructor(call: SetStakedContractCurrentCommissionIndexCall) {
    this._call = call;
  }
}

export class ChangeMasterAddressCall extends ethereum.Call {
  get inputs(): ChangeMasterAddressCall__Inputs {
    return new ChangeMasterAddressCall__Inputs(this);
  }

  get outputs(): ChangeMasterAddressCall__Outputs {
    return new ChangeMasterAddressCall__Outputs(this);
  }
}

export class ChangeMasterAddressCall__Inputs {
  _call: ChangeMasterAddressCall;

  constructor(call: ChangeMasterAddressCall) {
    this._call = call;
  }

  get _masterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeMasterAddressCall__Outputs {
  _call: ChangeMasterAddressCall;

  constructor(call: ChangeMasterAddressCall) {
    this._call = call;
  }
}

export class PushRedeemedStakeCommissionsCall extends ethereum.Call {
  get inputs(): PushRedeemedStakeCommissionsCall__Inputs {
    return new PushRedeemedStakeCommissionsCall__Inputs(this);
  }

  get outputs(): PushRedeemedStakeCommissionsCall__Outputs {
    return new PushRedeemedStakeCommissionsCall__Outputs(this);
  }
}

export class PushRedeemedStakeCommissionsCall__Inputs {
  _call: PushRedeemedStakeCommissionsCall;

  constructor(call: PushRedeemedStakeCommissionsCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakerIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PushRedeemedStakeCommissionsCall__Outputs {
  _call: PushRedeemedStakeCommissionsCall;

  constructor(call: PushRedeemedStakeCommissionsCall) {
    this._call = call;
  }
}

export class AddStakeCall extends ethereum.Call {
  get inputs(): AddStakeCall__Inputs {
    return new AddStakeCall__Inputs(this);
  }

  get outputs(): AddStakeCall__Outputs {
    return new AddStakeCall__Outputs(this);
  }
}

export class AddStakeCall__Inputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakedContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddStakeCall__Outputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }

  get scIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetStakedContractCurrentBurnIndexCall extends ethereum.Call {
  get inputs(): SetStakedContractCurrentBurnIndexCall__Inputs {
    return new SetStakedContractCurrentBurnIndexCall__Inputs(this);
  }

  get outputs(): SetStakedContractCurrentBurnIndexCall__Outputs {
    return new SetStakedContractCurrentBurnIndexCall__Outputs(this);
  }
}

export class SetStakedContractCurrentBurnIndexCall__Inputs {
  _call: SetStakedContractCurrentBurnIndexCall;

  constructor(call: SetStakedContractCurrentBurnIndexCall) {
    this._call = call;
  }

  get _stakedContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStakedContractCurrentBurnIndexCall__Outputs {
  _call: SetStakedContractCurrentBurnIndexCall;

  constructor(call: SetStakedContractCurrentBurnIndexCall) {
    this._call = call;
  }
}

export class ChangeWalletAddressCall extends ethereum.Call {
  get inputs(): ChangeWalletAddressCall__Inputs {
    return new ChangeWalletAddressCall__Inputs(this);
  }

  get outputs(): ChangeWalletAddressCall__Outputs {
    return new ChangeWalletAddressCall__Outputs(this);
  }
}

export class ChangeWalletAddressCall__Inputs {
  _call: ChangeWalletAddressCall;

  constructor(call: ChangeWalletAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeWalletAddressCall__Outputs {
  _call: ChangeWalletAddressCall;

  constructor(call: ChangeWalletAddressCall) {
    this._call = call;
  }
}

export class SetUnlockableBeforeLastBurnTokensCall extends ethereum.Call {
  get inputs(): SetUnlockableBeforeLastBurnTokensCall__Inputs {
    return new SetUnlockableBeforeLastBurnTokensCall__Inputs(this);
  }

  get outputs(): SetUnlockableBeforeLastBurnTokensCall__Outputs {
    return new SetUnlockableBeforeLastBurnTokensCall__Outputs(this);
  }
}

export class SetUnlockableBeforeLastBurnTokensCall__Inputs {
  _call: SetUnlockableBeforeLastBurnTokensCall;

  constructor(call: SetUnlockableBeforeLastBurnTokensCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakerIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetUnlockableBeforeLastBurnTokensCall__Outputs {
  _call: SetUnlockableBeforeLastBurnTokensCall;

  constructor(call: SetUnlockableBeforeLastBurnTokensCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _walletAdd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
